//============================================================
// BaseWeb - Minxins
// https://github.com/sebnitu/BaseWeb
//============================================================
// Typography
//============================================================

.uppercase(@letterSpacing: @letterSpacing) {
    text-transform: uppercase;
    letter-spacing: @letterSpacing;
}
.lowercase(@letterSpacing: 0) {
    text-transform: lowercase;
    letter-spacing: @letterSpacing;
}
.resetcase() {
    text-transform: none;
    letter-spacing: 0;
}

.remove-list-styles() {
    list-style: none;
    margin: 0;
    
    li {
        margin: 0;
    }
}

.hide-text() {
    text-indent: 100%;
    white-space: nowrap;
    overflow: hidden;
}
.hide-text-legacy() {
    text-indent: -9999px;
    white-space: nowrap;
    overflow: hidden;
}
//============================================================
// Clearing Elements
//============================================================

.clear {
	clear: both; display: block;
	overflow: hidden; visibility: hidden;
	width: 0; height: 0;
}
.clearfix {
	*zoom: 1;
	&:before, &:after {
		content: "\0020"; display: block;
		overflow: hidden; visibility: hidden;
		width: 0; height: 0;
	}
	&:after {
		clear: both;
	}
}

// Box Sizing
// Adds the box-sizing property with browser prefixes and global default
//
// @param the box model you want to use e.g. border-box, content-box
.box-sizing(@boxmodel) {
  -moz-box-sizing: @boxmodel;
  box-sizing: @boxmodel;
}

// Makes Hidden
// Makes an element hidden with display none !important
.make-hidden() {
  display: none !important;
}

// Makes Visible
// Makes an element visible with custom display value
//
// @param visibility value to use e.g. block, inline-block, table-cell
.make-visible( @display : @display-visible ) {
  display: @display !important;
}


//============================================================
// Border Radius
//============================================================

.border-radius(@radius: @borderRadius) {
    -webkit-border-radius: @radius;
    -moz-border-radius: @radius;
    border-radius: @radius;
}

// Top
//========================================
.border-radius-top(@radius: @borderRadius) {
    -webkit-border-top-left-radius: @radius;
    -webkit-border-top-right-radius: @radius;
    -moz-border-radius-topleft: @radius;
    -moz-border-radius-topright: @radius;
    border-top-left-radius: @radius;
    border-top-right-radius: @radius;
}
.border-radius-top-left(@radius: @borderRadius) {
    -webkit-border-top-left-radius: @radius;
    -moz-border-radius-topleft: @radius;
    border-top-left-radius: @radius;
}
.border-radius-top-right(@radius: @borderRadius) {
    -webkit-border-top-right-radius: @radius;
    -moz-border-radius-topright: @radius;
    border-top-right-radius: @radius;
}

// Bottom
//========================================
.border-radius-bottom(@radius: @borderRadius) {
    -webkit-border-bottom-right-radius: @radius;
    -webkit-border-bottom-left-radius: @radius;
    -moz-border-radius-bottomright: @radius;
    -moz-border-radius-bottomleft: @radius;
    border-bottom-right-radius: @radius;
    border-bottom-left-radius: @radius;
}
.border-radius-bottom-left(@radius: @borderRadius) {
    -webkit-border-bottom-left-radius: @radius;
    -moz-border-radius-bottomleft: @radius;
    border-bottom-left-radius: @radius;
}
.border-radius-bottom-right(@radius: @borderRadius) {
    -webkit-border-bottom-right-radius: @radius;
    -moz-border-radius-bottomright: @radius;
    border-bottom-right-radius: @radius;
}

// Left & Right
//========================================
.border-radius-left(@radius: @borderRadius) {
    -webkit-border-top-left-radius: @radius;
    -webkit-border-bottom-left-radius: @radius;
    -moz-border-radius-topleft: @radius;
    -moz-border-radius-bottomleft: @radius;
    border-top-left-radius: @radius;
    border-bottom-left-radius: @radius;
}
.border-radius-right(@radius: @borderRadius) {
    -webkit-border-top-right-radius: @radius;
    -webkit-border-bottom-right-radius: @radius;
    -moz-border-radius-topright: @radius;
    -moz-border-radius-bottomright: @radius;
    border-top-right-radius: @radius;
    border-bottom-right-radius: @radius;
}

//============================================================
// Box Shadow
//============================================================

.box-shadow(@shadow: @boxShadow) {
    -webkit-box-shadow: @shadow;
    -moz-box-shadow: @shadow;
    box-shadow: @shadow;
}

//============================================================
// Transition
//============================================================

.transition(@property: @transitionProperty, @duration: @transitionDuration, @function: @transitionFunction) {
    -webkit-transition: @arguments;
    -moz-transition: @arguments;
    -o-transition: @arguments;
    -ms-transition: @arguments;
    transition: @arguments;
}

//============================================================
// Rotate
//============================================================

.rotate(@deg: @rotateDegree) {
    -moz-transform: rotate(@deg);
    -webkit-transform: rotate(@deg);
    -o-transform: rotate(@deg);
    -ms-transform: rotate(@deg);
    transform: rotate(@deg);
}

//============================================================
// Gradient
//============================================================

#gradient {
    .horizontal(@startColor: @startColorDefault, @endColor: @endColor) {
        background-color: @endColor;
        background-image: -moz-linear-gradient(left, @startColor, @endColor);
        background-image: -ms-linear-gradient(left, @startColor, @endColor);
        background-image: -webkit-gradient(linear, 0 0, 100% 0, from(@startColor), to(@endColor));
        background-image: -webkit-linear-gradient(left, @startColor, @endColor);
        background-image: -o-linear-gradient(left, @startColor, @endColor);
        background-image: linear-gradient(left, @startColor, @endColor);
        background-repeat: repeat-x;
        filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",@startColor,@endColor));
    }
    .vertical(@startColor: @startColorDefault, @endColor: @endColor) {
        background-color: @endColor;
        background-image: -moz-linear-gradient(top, @startColor, @endColor);
        background-image: -ms-linear-gradient(top, @startColor, @endColor);
        background-image: -webkit-gradient(linear, 0 0, 0 100%, from(@startColor), to(@endColor));
        background-image: -webkit-linear-gradient(top, @startColor, @endColor);
        background-image: -o-linear-gradient(top, @startColor, @endColor);
        background-image: linear-gradient(top, @startColor, @endColor);
        background-repeat: repeat-x;
        filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",@startColor,@endColor));
    }
}

// Reset filters for IE
.reset-filter() {
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled = false)"));
}

//============================================================
// End of Minxins
//============================================================